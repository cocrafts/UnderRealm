scalar DateTime

type Query {
  greeting: String
  profile(address: String): Profile
  cardDuelHistory(limit: Int): [CardDuelHistory]
  cardDuelPlaying: CardDuelHistory
  cardDuel(id: String!): CardDuel
  quests(status: QuestStatus): [Quest]
  referralHistory: [ReferralHistory]
  inventory: Inventory
}

type Mutation {
  makeReferral(referralCode: String!): Boolean
  createQuestAction(questId: ID!): QuestAction
  purchaseLottery: PointTransaction
  openLottery: OpenLotteryResult
}

type Subscription {
  counterIncreased: Int!
  findMatch(userId: String!): CardDuel
}

type Profile {
  id: String!
  bindingId: String
  address: String
  email: String
  avatarUrl: String
  referred: ReferralHistory
  referralCode: String!
  points: Int!
}

type CardDuelSetting {
  playerHealth: Int
  handSize: Int
  groundSize: Int
  maxAttachment: Int
  perTurnHero: Int
  perTurnTroop: Int
}

type CardPlayerConfig {
  id: String
  deck: [String]
}

type CardDuelConfig {
  version: String!
  setting: CardDuelSetting!
  firstMover: String!
  firstPlayer: CardPlayerConfig!
  secondPlayer: CardPlayerConfig!
}

type CardBoardTarget {
  place: String
  owner: String
  id: String
  index: Int
}

type CardCommandTarget {
  from: CardBoardTarget
  to: CardBoardTarget
}

type CardDuelAttributes {
  attack: Int
  defense: Int
  health: Int
  charge: Int
  perTurnHero: Int
  perTurnTroop: Int
  gameOver: Boolean
  turn: Int
}

type CardDuelCommand {
  type: String!
  owner: String
  target: CardCommandTarget
  payload: CardDuelAttributes
}

type CardDuelCommandBundle {
  turn: Int
  group: String
  phase: String
  phaseOf: String
  commands: [CardDuelCommand]
}

type CardDuel {
  id: String
  config: CardDuelConfig
  history: [CardDuelCommandBundle]
}

type CardDuelHistory {
  id: String
  duel: CardDuel!
  enemy: Profile
  victory: Boolean
  timestamp: String!
}

enum QuestType {
  LIKE_X
  RETWEET_X
  JOIN_DISCORD
  COMMENT_X
}

enum QuestStatus {
  LIVE
  INIT
  DISABLE
}

type Quest {
  id: ID!
  title: String!
  description: String!
  type: QuestType!
  status: QuestStatus!
  url: String!
  points: Int!
  createdAt: DateTime!
  action: QuestAction
}

type QuestAction {
  id: ID!
  questId: ID!
  userId: ID!
  claimedPoints: Int!
  createdAt: DateTime!
}

type ReferralHistory {
  id: ID!
  referrerId: String
  refereeId: String
  refereeUser: Profile
  claimedPoints: Int
  createdAt: DateTime
}

type OpenLotteryResult {
  userId: ID!
  items: [InventoryItem!]!
}

type InventoryItem {
  itemId: String!
  amount: Int!
}

type Inventory {
  id: String!
  userId: String!
  items: [InventoryItem!]!
}


type  PointTransaction {
  id: String!
  type: String!
  userId: String!
  amount: Int
  purchaseAt: DateTime
}
